{"attributes":{"backlinks":[{"tag":"document","title":"toc","docid":"documents/toc.md"}],"path":"/home/runner/.julia/packages/FastAI/pdcZC/notebooks/tabularclassification.ipynb","title":"Tabular Classification"},"tag":"document","children":[{"attributes":{},"tag":"h1","children":[{"mimes":{"text/plain":"Tabular Classification"}}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"Tabular Classification involves having a categorical column as the target"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" Here, we"}},{"mimes":{"text/plain":"’"}},{"mimes":{"text/plain":"ll use the adult sample dataset from fastai and try to predict whether the salary is above 50K or not, making this a binary classification task"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"using Flux\nusing FastAI\nusing Tables\nusing Statistics\nusing FluxTraining\nimport DataAugmentation"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"We can quickly download and get the path of any dataset from fastai by using "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.datasetpath"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"datasetpath"}}]}]},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" Once we have the path, we"}},{"mimes":{"text/plain":"’"}},{"mimes":{"text/plain":"ll load the data in a "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TableDataset"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"TableDataset"}}]}]},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" By default, if we pass in just the path to "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TableDataset"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"TableDataset"}}]}]},{"mimes":{"text/plain":", the data is loaded in a "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"DataFrame"}}]},{"mimes":{"text/plain":", but we can use any package for accessing our data, and pass an object satisfying the "}},{"attributes":{"href":"https://github.com/JuliaData/Tables.jl","title":""},"tag":"a","children":[{"mimes":{"text/plain":"Tables"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":"jl"}}]},{"mimes":{"text/plain":" interface to it"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"data = TableDataset(joinpath(datasetpath(\"adult_sample\"), \"adult.csv\"))"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"TableDataset{DataFrames.DataFrame}(\u001b[1m32561×15 DataFrame\u001b[0m\n\u001b[1m   Row \u001b[0m│\u001b[1m age   \u001b[0m\u001b[1m workclass         \u001b[0m\u001b[1m fnlwgt \u001b[0m\u001b[1m education     \u001b[0m\u001b[1m education-num \u001b[0m\u001b[1m marit\u001b[0m ⋯\n\u001b[1m       \u001b[0m│\u001b[90m Int64 \u001b[0m\u001b[90m String            \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String        \u001b[0m\u001b[90m Float64?      \u001b[0m\u001b[90m Strin\u001b[0m ⋯\n───────┼────────────────────────────────────────────────────────────────────────\n     1 │    49   Private           101320   Assoc-acdm             12.0   Marr ⋯\n     2 │    44   Private           236746   Masters                14.0   Divo\n     3 │    38   Private            96185   HS-grad      \u001b[90m     missing   \u001b[0m  Divo\n     4 │    38   Self-emp-inc      112847   Prof-school            15.0   Marr\n     5 │    42   Self-emp-not-inc   82297   7th-8th      \u001b[90m     missing   \u001b[0m  Marr ⋯\n     6 │    20   Private            63210   HS-grad                 9.0   Neve\n     7 │    49   Private            44434   Some-college           10.0   Divo\n     8 │    37   Private           138940   11th                    7.0   Marr\n     9 │    46   Private           328216   HS-grad                 9.0   Marr ⋯\n    10 │    36   Self-emp-inc      216711   HS-grad      \u001b[90m     missing   \u001b[0m  Marr\n    11 │    23   Private           529223   Bachelors              13.0   Neve\n   ⋮   │   ⋮            ⋮            ⋮           ⋮              ⋮              ⋱\n 32552 │    60   Private           230545   7th-8th                 4.0   Divo\n 32553 │    39   Private           139743   HS-grad                 9.0   Sepa ⋯\n 32554 │    35   Self-emp-inc      135436   Prof-school            15.0   Marr\n 32555 │    53   Private            35102   Some-college           10.0   Divo\n 32556 │    48   Private           355320   Bachelors              13.0   Marr\n 32557 │    36   Private           297449   Bachelors              13.0   Divo ⋯\n 32558 │    23   ?                 123983   Bachelors              13.0   Neve\n 32559 │    53   Private           157069   Assoc-acdm             12.0   Marr\n 32560 │    32   Local-gov         217296   HS-grad                 9.0   Marr\n 32561 │    26   Private           182308   Some-college           10.0   Marr ⋯\n\u001b[36m                                               10 columns and 32540 rows omitted\u001b[0m)"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"In case our data was present in a different format for eg"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" parquet, it could be loaded into a data container as follows:"}}]},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"CST_DEFINITION","children":[{"attributes":{},"tag":"CST_using","children":[{"attributes":{},"tag":"CST_span","children":[{"attributes":{},"tag":"CST_KEYWORD","children":[{"mimes":{"text/plain":"using"}}]},{"attributes":{},"tag":"CST_whitespace","children":[{"mimes":{"text/plain":" "}}]}]},{"attributes":{},"tag":"CST_OPERATOR","children":[{"attributes":{},"tag":"CST_span","children":[{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"Parquet"}}]},{"attributes":{},"tag":"CST_whitespace","children":[{"mimes":{"text/plain":"\n\n"}}]}]}]}]}]},{"attributes":{},"tag":"CST_DEFINITION","children":[{"attributes":{},"tag":"CST_toplevel","children":[{"attributes":{},"tag":"CST_call","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TableDataset"},"tag":"reference","children":[{"mimes":{"text/plain":"TableDataset"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_call","children":[{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"read_parquet"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"parquet_path"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":");"}}]}]}]}]}]},{"attributes":{},"tag":"p","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.mapobs"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"mapobs"}}]}]},{"mimes":{"text/plain":" is used here to split our target column from the rest of the row in a lazy manner, so that each observation consists of a row of inputs and a target variable"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"splitdata = mapobs(row -> (row, row[:salary]), data);"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"To create a learning task for tabular classification task, we need an input block, an output block, and the encodings to be performed on the data"}},{"mimes":{"text/plain":"."}}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"The input block here is a "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TableRow"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"TableRow"}}]}]},{"mimes":{"text/plain":" which contains information about the nature of the columns (ie"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" categorical or continuous) along with an indexable collection mapping categorical column names to a collection with distinct classes in that column"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" We can get this mapping by using the "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"gettransformationdict"}}]},{"mimes":{"text/plain":" task with "}},{"attributes":{"reftype":"symbol","document_id":"references/DataAugmentation.Categorify"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"DataAugmentation.Categorify"}}]}]},{"mimes":{"text/plain":"."}}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"The outblock block used is "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.Label"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Label"}}]}]},{"mimes":{"text/plain":" for single column classification and the unique classes have to passed to it"}},{"mimes":{"text/plain":"."}}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"This is followed by the encodings which needs to be applied on our input and output blocks"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" For the input block, we have used the "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"gettransforms"}}]},{"mimes":{"text/plain":" function here to get a standard bunch of transformations to apply, but this can be easily customized by passing in any tabular transformation from DataAugmentation"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":"jl or a composition of those, to "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TabularPreprocessing"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"TabularPreprocessing"}}]}]},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" In addition to this, we have just one"}},{"mimes":{"text/plain":"-"}},{"mimes":{"text/plain":"hot encoded the outblock"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"cat, cont = FastAI.getcoltypes(data)\ntarget = :salary\ncat = filter(!isequal(target), cat)\ncatdict = FastAI.gettransformdict(data, DataAugmentation.Categorify, cat);"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"inputblock = TableRow(cat, cont, catdict)\ntargetblock = Label(unique(data.table[:, target]))\n\ntask = BlockTask(\n    (inputblock, targetblock),\n    (\n        setup(TabularPreprocessing, inputblock, data),\n        FastAI.OneHot()\n    )\n)"}}]}]},{"attributes":{"class":"codeoutput"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"┌ Warning: There is a missing value present for category 'occupation' which will be removed from Categorify dict\n└ @ DataAugmentation /home/lorenz/.julia/dev/DataAugmentation/src/rowtransforms.jl:108\n"}}]}]},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"BlockTask(TableRow{8, 6, Dict{Any, Any}} -> Label{String})"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"In case our initial problem wasn"}},{"mimes":{"text/plain":"’"}},{"mimes":{"text/plain":"t a classification task, and we had a continuous target column, we would need to perform tabular regression"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" To create a learning task suitable for regression, we use a "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.Continuous"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Continuous"}}]}]},{"mimes":{"text/plain":" block for representing our target column"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" This can be done even with multiple continuous target columns by just passing the number of columns in "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Continuous"}}]},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" For example, the task here could be used for 3 targets"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"CST_DEFINITION","children":[{"attributes":{},"tag":"CST_OPERATOR","children":[{"attributes":{},"tag":"CST_span","children":[{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"task2"}}]},{"attributes":{},"tag":"CST_whitespace","children":[{"mimes":{"text/plain":" "}}]}]},{"attributes":{},"tag":"CST_OPERATOR","children":[{"mimes":{"text/plain":"= "}}]},{"attributes":{},"tag":"CST_call","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.BlockTask"},"tag":"reference","children":[{"mimes":{"text/plain":"BlockTask"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"(\n\n    "}}]},{"attributes":{},"tag":"CST_tuple","children":[{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"(\n\n        "}}]},{"attributes":{},"tag":"CST_call","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TableRow"},"tag":"reference","children":[{"mimes":{"text/plain":"TableRow"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"cat"}}]},{"attributes":{},"tag":"CST_PUNCTUATION","children":[{"mimes":{"text/plain":", "}}]},{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"cont"}}]},{"attributes":{},"tag":"CST_PUNCTUATION","children":[{"mimes":{"text/plain":", "}}]},{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"catdict"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]},{"attributes":{},"tag":"CST_PUNCTUATION","children":[{"mimes":{"text/plain":", \n\n        "}}]},{"attributes":{},"tag":"CST_call","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.Continuous"},"tag":"reference","children":[{"mimes":{"text/plain":"Continuous"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_INTEGER","children":[{"mimes":{"text/plain":"3"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")\n\n    "}}]}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]},{"attributes":{},"tag":"CST_PUNCTUATION","children":[{"mimes":{"text/plain":",\n\n    "}}]},{"attributes":{},"tag":"CST_brackets","children":[{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_tuple","children":[{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_call","children":[{"attributes":{},"tag":"CST_OPERATOR","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI"},"tag":"reference","children":[{"mimes":{"text/plain":"FastAI"}}]},{"attributes":{},"tag":"CST_OPERATOR","children":[{"mimes":{"text/plain":"."}}]},{"attributes":{},"tag":"CST_quotenode","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.TabularPreprocessing"},"tag":"reference","children":[{"mimes":{"text/plain":"TabularPreprocessing"}}]}]}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"data"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]},{"attributes":{},"tag":"CST_PUNCTUATION","children":[{"mimes":{"text/plain":","}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]},{"attributes":{},"tag":"CST_PUNCTUATION","children":[{"mimes":{"text/plain":",\n\n    "}}]},{"attributes":{},"tag":"CST_kw","children":[{"attributes":{},"tag":"CST_span","children":[{"attributes":{},"tag":"CST_IDENTIFIER","children":[{"mimes":{"text/plain":"outputblock"}}]},{"attributes":{},"tag":"CST_whitespace","children":[{"mimes":{"text/plain":" "}}]}]},{"attributes":{},"tag":"CST_OPERATOR","children":[{"mimes":{"text/plain":"= "}}]},{"attributes":{},"tag":"CST_call","children":[{"attributes":{"reftype":"symbol","document_id":"references/FastAI.Continuous"},"tag":"reference","children":[{"mimes":{"text/plain":"Continuous"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":"("}}]},{"attributes":{},"tag":"CST_INTEGER","children":[{"mimes":{"text/plain":"3"}}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")\n\n"}}]}]}]},{"attributes":{},"tag":"CST_BRACKET","children":[{"mimes":{"text/plain":")"}}]}]}]}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"To get an overview of the learning task created, and as a sanity test, we can use "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.describetask"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"describetask"}}]}]},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" This shows us what encodings will be applied to which blocks, and how the predicted ŷ values are decoded"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"describetask(task)"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"\u001b[1m  \u001b[36mLearningTask\u001b[39m summary\u001b[22m\n\u001b[1m  ------------------------\u001b[22m\n\n    •  Task: \u001b[36mTableRow{8, 6, Dict{Any, Any}} -> Label{String}\u001b[39m\n\n    •  Model blocks: \u001b[36mFastAI.EncodedTableRow{8, 6, Dict{Any, Any}} ->\n       FastAI.OneHotTensor{0, String}\u001b[39m\n\n  Encoding a sample (\u001b[36mencodesample(task, context, sample)\u001b[39m)\n\n              Encoding            Name                             \u001b[36mtask.blocks[1]\u001b[39m               \u001b[36mtask.blocks[2]\u001b[39m\n  –––––––––––––––––––– ––––––––––––––– –––––––––––––––––––––––––––––––––––––––––––– ––––––––––––––––––––––––––––––\n                       \u001b[36m(input, target)\u001b[39m               \u001b[36mTableRow{8, 6, Dict{Any, Any}}\u001b[39m                  \u001b[36mLabel{String}\u001b[39m\n  \u001b[36mTabularPreprocessing\u001b[39m                 \u001b[1m\u001b[36mFastAI.EncodedTableRow{8, 6, Dict{Any, Any}}\u001b[39m\u001b[22m                  \u001b[36mLabel{String}\u001b[39m\n                \u001b[36mOneHot\u001b[39m          \u001b[36m(x, y)\u001b[39m \u001b[36mFastAI.EncodedTableRow{8, 6, Dict{Any, Any}}\u001b[39m \u001b[1m\u001b[36mFastAI.OneHotTensor{0, String}\u001b[39m\u001b[22m\n\n  Decoding a model output (\u001b[36mdecode(task, context, ŷ)\u001b[39m)\n\n              Decoding        Name             \u001b[36mtask.outputblock\u001b[39m\n  –––––––––––––––––––– ––––––––––– ––––––––––––––––––––––––––––––\n                                \u001b[36mŷ\u001b[39m \u001b[36mFastAI.OneHotTensor{0, String}\u001b[39m\n                \u001b[36mOneHot\u001b[39m                              \u001b[1m\u001b[36mLabel{String}\u001b[39m\u001b[22m\n  \u001b[36mTabularPreprocessing\u001b[39m \u001b[36mtarget_pred\u001b[39m                  \u001b[36mLabel{String}\u001b[39m","text/latex":"\\paragraph{\\texttt{LearningTask} summary}\n\\begin{itemize}\n\\item Task: \\texttt{TableRow\\{8, 6, Dict\\{Any, Any\\}\\} -> Label\\{String\\}}\n\n\n\\item Model blocks: \\texttt{FastAI.EncodedTableRow\\{8, 6, Dict\\{Any, Any\\}\\} -> FastAI.OneHotTensor\\{0, String\\}}\n\n\\end{itemize}\nEncoding a sample (\\texttt{encodesample(task, context, sample)})\n\n\\begin{tabular}\n{r | r | r | r}\nEncoding & Name & \\texttt{task.blocks[1]} & \\texttt{task.blocks[2]} \\\\\n\\hline\n & \\texttt{(input, target)} & \\texttt{TableRow\\{8, 6, Dict\\{Any, Any\\}\\}} & \\texttt{Label\\{String\\}} \\\\\n\\texttt{TabularPreprocessing} &  & \\textbf{\\texttt{FastAI.EncodedTableRow\\{8, 6, Dict\\{Any, Any\\}\\}}} & \\texttt{Label\\{String\\}} \\\\\n\\texttt{OneHot} & \\texttt{(x, y)} & \\texttt{FastAI.EncodedTableRow\\{8, 6, Dict\\{Any, Any\\}\\}} & \\textbf{\\texttt{FastAI.OneHotTensor\\{0, String\\}}} \\\\\n\\end{tabular}\nDecoding a model output (\\texttt{decode(task, context, ŷ)})\n\n\\begin{tabular}\n{r | r | r}\nDecoding & Name & \\texttt{task.outputblock} \\\\\n\\hline\n & \\texttt{ŷ} & \\texttt{FastAI.OneHotTensor\\{0, String\\}} \\\\\n\\texttt{OneHot} &  & \\textbf{\\texttt{Label\\{String\\}}} \\\\\n\\texttt{TabularPreprocessing} & \\texttt{target\\_pred} & \\texttt{Label\\{String\\}} \\\\\n\\end{tabular}\n","text/markdown":"#### `LearningTask` summary\n\n  * Task: `TableRow{8, 6, Dict{Any, Any}} -> Label{String}`\n  * Model blocks: `FastAI.EncodedTableRow{8, 6, Dict{Any, Any}} -> FastAI.OneHotTensor{0, String}`\n\nEncoding a sample (`encodesample(task, context, sample)`)\n\n|               Encoding |              Name |                                 `task.blocks[1]` |                   `task.blocks[2]` |\n| ----------------------:| -----------------:| --------------------------------------------------:| ------------------------------------:|\n|                        | `(input, target)` |                   `TableRow{8, 6, Dict{Any, Any}}` |                      `Label{String}` |\n| `TabularPreprocessing` |                   | **`FastAI.EncodedTableRow{8, 6, Dict{Any, Any}}`** |                      `Label{String}` |\n|               `OneHot` |          `(x, y)` |     `FastAI.EncodedTableRow{8, 6, Dict{Any, Any}}` | **`FastAI.OneHotTensor{0, String}`** |\n\nDecoding a model output (`decode(task, context, ŷ)`)\n\n|               Decoding |          Name |             `task.outputblock` |\n| ----------------------:| -------------:| --------------------------------:|\n|                        |          `ŷ` | `FastAI.OneHotTensor{0, String}` |\n|               `OneHot` |               |              **`Label{String}`** |\n| `TabularPreprocessing` | `target_pred` |                  `Label{String}` |\n"}}]}]},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"getobs"}}]},{"mimes":{"text/plain":" gets us a row of data from the "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"TableDataset"}}]},{"mimes":{"text/plain":", which we encode here"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" This gives us a tuple with the input and target"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" The input here is again a tuple, containing the categorical values (which have been label encoded or "}},{"mimes":{"text/plain":"“"}},{"mimes":{"text/plain":"categorified"}},{"mimes":{"text/plain":"”"}},{"mimes":{"text/plain":") and the continuous values (which have been normalized and any missing values have been filled)"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"getobs(splitdata, 1000)"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"(\u001b[1mDataFrameRow\u001b[0m\n\u001b[1m  Row \u001b[0m│\u001b[1m age   \u001b[0m\u001b[1m workclass  \u001b[0m\u001b[1m fnlwgt \u001b[0m\u001b[1m education \u001b[0m\u001b[1m education-num \u001b[0m\u001b[1m marital-status   \u001b[0m ⋯\n\u001b[1m      \u001b[0m│\u001b[90m Int64 \u001b[0m\u001b[90m String     \u001b[0m\u001b[90m Int64  \u001b[0m\u001b[90m String    \u001b[0m\u001b[90m Float64?      \u001b[0m\u001b[90m String           \u001b[0m ⋯\n──────┼─────────────────────────────────────────────────────────────────────────\n 1000 │    61   State-gov  162678   5th-6th             3.0   Married-civ-spou ⋯\n\u001b[36m                                                              10 columns omitted\u001b[0m, \"<50k\")"}}]}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"x = encodesample(task, Training(), getobs(splitdata, 1000))"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"(([5, 16, 2, 10, 5, 2, 3, 2], [1.6435221651965317, -0.2567538819371021, -2.751580937680526, -0.14591824281680102, -0.21665620002803673, -0.035428902921319616]), Float32[0.0, 1.0])"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"To get a model suitable for our learning task, we can use "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.taskmodel"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"taskmodel"}}]}]},{"mimes":{"text/plain":" which constructs a suitable model based on the target block"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"model = taskmodel(task)"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Chain(\n  Parallel(\n    vcat,\n    Chain(\n      FastAI.Models.var\"#41#43\"(),\n      Parallel(\n        vcat,\n        Embedding(10, 6),               \u001b[90m# 60 parameters\u001b[39m\n        Embedding(17, 8),               \u001b[90m# 136 parameters\u001b[39m\n        Embedding(8, 5),                \u001b[90m# 40 parameters\u001b[39m\n        Embedding(17, 8),               \u001b[90m# 136 parameters\u001b[39m\n        Embedding(7, 5),                \u001b[90m# 35 parameters\u001b[39m\n        Embedding(6, 4),                \u001b[90m# 24 parameters\u001b[39m\n        Embedding(3, 3),                \u001b[90m# 9 parameters\u001b[39m\n        Embedding(43, 13),              \u001b[90m# 559 parameters\u001b[39m\n      ),\n      identity,\n    ),\n    BatchNorm(6),                       \u001b[90m# 12 parameters\u001b[39m\u001b[90m, plus 12\u001b[39m\n  ),\n  Chain(\n    Dense(58, 200, relu; bias=false),   \u001b[90m# 11_600 parameters\u001b[39m\n    BatchNorm(200),                     \u001b[90m# 400 parameters\u001b[39m\u001b[90m, plus 400\u001b[39m\n    identity,\n  ),\n  Chain(\n    Dense(200, 100, relu; bias=false),  \u001b[90m# 20_000 parameters\u001b[39m\n    BatchNorm(100),                     \u001b[90m# 200 parameters\u001b[39m\u001b[90m, plus 200\u001b[39m\n    identity,\n  ),\n  Dense(100, 2),                        \u001b[90m# 202 parameters\u001b[39m\n)\u001b[90m                   # Total: 18 arrays, \u001b[39m33_413 parameters, 130.172 KiB."}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"Of course you can also create a custom backbone using the functions present in "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"FastAI.Models"}}]},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"cardinalities = collect(map(col -> length(catdict[col]), cat))\n\novdict = Dict(:workclass => 10, :education => 12, Symbol(\"native-country\") => 16)\noverrides = collect(map(col -> col in keys(ovdict) ? ovdict[col] : nothing, cat))\n\nembedszs = FastAI.Models.get_emb_sz(cardinalities, overrides)\ncatback = FastAI.Models.tabular_embedding_backbone(embedszs, 0.2);"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"We can then pass a named tuple "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"(categorical = ..., continuous = ...)"}}]},{"mimes":{"text/plain":" to "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"taskmodel"}}]},{"mimes":{"text/plain":" to replace the default backbone"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"backbone = (categorical = catback, continuous =  BatchNorm(length(cont)))\nmodel = taskmodel(task, backbone)"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Chain(\n  Parallel(\n    vcat,\n    Chain(\n      FastAI.Models.var\"#41#43\"(),\n      Parallel(\n        vcat,\n        Embedding(10, 10),              \u001b[90m# 100 parameters\u001b[39m\n        Embedding(17, 12),              \u001b[90m# 204 parameters\u001b[39m\n        Embedding(8, 5),                \u001b[90m# 40 parameters\u001b[39m\n        Embedding(17, 8),               \u001b[90m# 136 parameters\u001b[39m\n        Embedding(7, 5),                \u001b[90m# 35 parameters\u001b[39m\n        Embedding(6, 4),                \u001b[90m# 24 parameters\u001b[39m\n        Embedding(3, 3),                \u001b[90m# 9 parameters\u001b[39m\n        Embedding(43, 16),              \u001b[90m# 688 parameters\u001b[39m\n      ),\n      Dropout(0.2),\n    ),\n    BatchNorm(6),                       \u001b[90m# 12 parameters\u001b[39m\u001b[90m, plus 12\u001b[39m\n  ),\n  Chain(\n    Dense(69, 200, relu; bias=false),   \u001b[90m# 13_800 parameters\u001b[39m\n    BatchNorm(200),                     \u001b[90m# 400 parameters\u001b[39m\u001b[90m, plus 400\u001b[39m\n    identity,\n  ),\n  Chain(\n    Dense(200, 100, relu; bias=false),  \u001b[90m# 20_000 parameters\u001b[39m\n    BatchNorm(100),                     \u001b[90m# 200 parameters\u001b[39m\u001b[90m, plus 200\u001b[39m\n    identity,\n  ),\n  Dense(100, 2),                        \u001b[90m# 202 parameters\u001b[39m\n)\u001b[90m                   # Total: 18 arrays, \u001b[39m35_850 parameters, 138.828 KiB."}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"To directly get a "}},{"attributes":{"reftype":"symbol","document_id":"references/FluxTraining.Learner"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Learner"}}]}]},{"mimes":{"text/plain":" suitable for our task and data, we can use the "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.tasklearner"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"tasklearner"}}]}]},{"mimes":{"text/plain":" function"}},{"mimes":{"text/plain":"."}},{"mimes":{"text/plain":" This creates both batched data loaders and a model for us"}},{"mimes":{"text/plain":"."}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"learner = tasklearner(task, splitdata;\n    backbone=backbone, callbacks=[Metrics(accuracy)],\n    batchsize=128, buffered=false)"}}]}]},{"mimes":{"text/plain":""}},{"attributes":{"class":"coderesult"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Learner()"}}]}]},{"attributes":{},"tag":"p","children":[{"mimes":{"text/plain":"Once we have a "}},{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"Learner"}}]},{"mimes":{"text/plain":", we can call "}},{"attributes":{"reftype":"symbol","document_id":"references/FastAI.fitonecycle!"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"fitonecycle!"}}]}]},{"mimes":{"text/plain":" on it to train it for the desired number of epochs:"}}]},{"attributes":{"lang":"julia"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"fitonecycle!(learner, 3, 0.2)"}}]}]},{"attributes":{"class":"codeoutput"},"tag":"pre","children":[{"attributes":{},"tag":"code","children":[{"mimes":{"text/plain":"\u001b[32mEpoch 1 TrainingPhase(): 100%|██████████████████████████| Time: 0:01:00\u001b[39m\n┌───────────────┬───────┬─────────┬──────────┐\n│\u001b[1m         Phase \u001b[0m│\u001b[1m Epoch \u001b[0m│\u001b[1m    Loss \u001b[0m│\u001b[1m Accuracy \u001b[0m│\n├───────────────┼───────┼─────────┼──────────┤\n│ TrainingPhase │   1.0 │ 0.37405 │  0.82753 │\n└───────────────┴───────┴─────────┴──────────┘\n\u001b[32mEpoch 1 ValidationPhase(): 100%|████████████████████████| Time: 0:00:02\u001b[39m\n┌─────────────────┬───────┬─────────┬──────────┐\n│\u001b[1m           Phase \u001b[0m│\u001b[1m Epoch \u001b[0m│\u001b[1m    Loss \u001b[0m│\u001b[1m Accuracy \u001b[0m│\n├─────────────────┼───────┼─────────┼──────────┤\n│ ValidationPhase │   1.0 │ 0.39243 │  0.81782 │\n└─────────────────┴───────┴─────────┴──────────┘\n\u001b[32mEpoch 2 TrainingPhase(): 100%|██████████████████████████| Time: 0:00:04\u001b[39m\n┌───────────────┬───────┬─────────┬──────────┐\n│\u001b[1m         Phase \u001b[0m│\u001b[1m Epoch \u001b[0m│\u001b[1m    Loss \u001b[0m│\u001b[1m Accuracy \u001b[0m│\n├───────────────┼───────┼─────────┼──────────┤\n│ TrainingPhase │   2.0 │ 0.35332 │  0.83909 │\n└───────────────┴───────┴─────────┴──────────┘\n\u001b[32mEpoch 2 ValidationPhase(): 100%|████████████████████████| Time: 0:00:00\u001b[39m\n┌─────────────────┬───────┬─────────┬──────────┐\n│\u001b[1m           Phase \u001b[0m│\u001b[1m Epoch \u001b[0m│\u001b[1m    Loss \u001b[0m│\u001b[1m Accuracy \u001b[0m│\n├─────────────────┼───────┼─────────┼──────────┤\n│ ValidationPhase │   2.0 │ 0.33674 │  0.84259 │\n└─────────────────┴───────┴─────────┴──────────┘\n\u001b[32mEpoch 3 TrainingPhase(): 100%|██████████████████████████| Time: 0:00:04\u001b[39m\n┌───────────────┬───────┬─────────┬──────────┐\n│\u001b[1m         Phase \u001b[0m│\u001b[1m Epoch \u001b[0m│\u001b[1m    Loss \u001b[0m│\u001b[1m Accuracy \u001b[0m│\n├───────────────┼───────┼─────────┼──────────┤\n│ TrainingPhase │   3.0 │ 0.32081 │  0.85238 │\n└───────────────┴───────┴─────────┴──────────┘\n\u001b[32mEpoch 3 ValidationPhase(): 100%|████████████████████████| Time: 0:00:00\u001b[39m\n┌─────────────────┬───────┬─────────┬──────────┐\n│\u001b[1m           Phase \u001b[0m│\u001b[1m Epoch \u001b[0m│\u001b[1m    Loss \u001b[0m│\u001b[1m Accuracy \u001b[0m│\n├─────────────────┼───────┼─────────┼──────────┤\n│ ValidationPhase │   3.0 │ 0.31522 │  0.85259 │\n└─────────────────┴───────┴─────────┴──────────┘\n"}}]}]}]}