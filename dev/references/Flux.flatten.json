{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"FastAI/src/datasets/registry.jl","docid":"sourcefiles/FastAI/src/datasets/registry.jl"},{"tag":"document","title":"Variational autoencoders","docid":"documents/notebooks/vae.ipynb"},{"tag":"sourcefile","title":"FastAI/src/Vision/models/unet.jl","docid":"sourcefiles/FastAI/src/Vision/models/unet.jl"},{"tag":"document","title":"Custom learning tasks","docid":"documents/docs/learning_methods.md"},{"tag":"sourcefile","title":"Flux/src/layers/stateless.jl","docid":"sourcefiles/Flux/src/layers/stateless.jl"},{"tag":"sourcefile","title":"FastAI/src/Vision/recipes.jl","docid":"sourcefiles/FastAI/src/Vision/recipes.jl"},{"tag":"sourcefile","title":"FastAI/src/Vision/models/blocks.jl","docid":"sourcefiles/FastAI/src/Vision/models/blocks.jl"}],"methods":[{"line":25,"file":"/home/runner/.julia/packages/Flux/18YZE/src/layers/stateless.jl","method_id":"Flux.flatten_1","symbol_id":"Flux.flatten","signature":"flatten(x::AbstractArray)"}],"name":"flatten","title":"flatten","symbol_id":"Flux.flatten","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["flatten(x::AbstractArray)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Reshape arbitrarly-shaped input into a matrix-shaped output,",{"attributes":{},"tag":"br","children":[],"type":"node"},"preserving the size of the last dimension."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["unsqueeze"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> rand(3,4,5) |> Flux.flatten |> size\n(12, 5)\n\njulia> xs = rand(Float32, 10,10,3,7);\n\njulia> m = Chain(Conv((3,3), 3 => 4, pad=1), Flux.flatten, Dense(400 => 33));\n\njulia> xs |> m[1] |> size\n(10, 10, 4, 7)\n\njulia> xs |> m |> size\n(33, 7)\n"],"type":"node"}],"type":"node"}],"type":"node"}