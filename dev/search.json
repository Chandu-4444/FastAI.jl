[{"body":"public   joinobs   —   function Concatenate data containers  datas .","id":"docstrings/FastAI.Datasets.joinobs.html"},{"body":"Datasets","id":"docs/interfaces.html#datasets"},{"body":"private   setschedules!   —   function Set  schedules  on  learner ’ s  Scheduler  callback so that training resumes from there . If  learner  does not have a  Scheduler  callback yet, adds it .","id":"docstrings/FastAI.setschedules!.html"},{"body":"High - level Quickly get started training and finetuning models using already implemented learning methods and callbacks . methodlearner fit! fitonecycle! finetune! evaluate! learning methods ImageClassification ImageSegmentation callbacks","id":"docs/interfaces.html#high-level"},{"body":"Low - level Full control over data containers . getobs nobs","id":"docs/interfaces.html#low-level-1"},{"body":"Data loaders Next we turn the data container into training and validation data loaders .  These take care of efficiently loading batches of data (by default in parallel) .  The observations are already preprocessed using the information in  method  and then batched together .  Let ’ s look at a single batch: xs  is a batch of cropped and normalized images with dimensions  (height, width, color channels, batch size)  and  ys  a batch of one - hot encoded classes with dimensions  (classes, batch size) .","id":"docs/introduction.html#data-loaders"},{"body":"private   makeitem   —   function Tries to assign a  DataAugmentation.Item  from  data  based on its type . args  are passed to the chosen   Item  constructor . AbstractMatrix{<:Colorant}   - >  Image Vector{<:Union{Nothing, SVector}}   - >  Keypoints","id":"docstrings/FastAI.makeitem.html"},{"body":"public   ProjectiveTransforms   —   struct Pipeline step that resizes images and keypoints to  size . In context  Training , applies  augmentations .","id":"docstrings/FastAI.ProjectiveTransforms.html"},{"body":"public   ImageClassification   —   struct A  Method  for multi - class image classification using softmax probabilities . classes  is a vector of the category labels .  Alternatively, you can pass an integer . Images are resized to  sz . During training, a random crop is used and  augmentations , a  DataAugmentation.Transform are applied .","id":"docstrings/FastAI.ImageClassification.html"},{"body":"private   invert   —   function Applies the inverse of the operation  step  to  data","id":"docstrings/FastAI.invert.html"},{"body":"public   groupobs   —   function Split data container data  data  into different data containers, grouping observations by  f(obs) .","id":"docstrings/FastAI.Datasets.groupobs.html"},{"body":"Name Module Visibility Category  datasetpath   FastAI.Datasets   private   function   filterobs   FastAI.Datasets   public   function   getclasses   FastAI.Datasets   private   function   groupobs   FastAI.Datasets   public   function   joinobs   FastAI.Datasets   public   function   loadfile   FastAI.Datasets   public   function   loadtaskdata   FastAI.Datasets   private   function   mapobs   FastAI.Datasets   public   function   Datasets   FastAI.Datasets   public   module   ImageClassification   FastAI   public   struct   ImagePreprocessing   FastAI   public   struct   ProjectiveTransforms   FastAI   public   struct   finetune!   FastAI   public   function   fitonecycle!   FastAI   public   function   freeze   FastAI   private   function   invert!   FastAI   private   function   invert   FastAI   private   function   makeitem   FastAI   private   function   run!   FastAI   private   function   run   FastAI   private   function   setschedules!   FastAI   private   function   withcallbacks   FastAI   private   function   withfields   FastAI   private   function ","id":"docstrings.html#docstring-index"},{"body":"Definitions","id":"docs/glossary.html#definitions"},{"body":"Learning task An abstract subtype of  DLPipelines.LearningTask  that represents the problem of learning a mapping from some input type  I  to a target type  T .  For example,  ImageClassificationTask  represents the task of learning to map an image to a class .  See  learning method","id":"docs/glossary.html#learning-task"},{"body":"private   loadtaskdata   —   function Load a task data container for  LearningTask   Task  stored in  dir in a canonical format . Load a data container for  ImageClassificationTask  with observations (input = image, target = class) . If  split  is  true , returns a tuple of the data containers split by the name of the grandparent folder . dir  should contain the data in the following canonical format: dir split (e . g .   “ train ” ,  “ valid ” … ) class (e . g .   “ cat ” ,  “ dog ” … ) image32434 . { jpg/png/ … } … … … Load a data container for  ImageSegmentationTask  with observations (input = image, target = mask) . If  split  is  true , returns a tuple of the data containers split by the name of the grandparent folder .","id":"docstrings/FastAI.Datasets.loadtaskdata.html"},{"body":"public   Datasets   —   module Commonly used datasets and utilities for creating data containers . ToDos: add localization/segmentation datasets add labels for classification datasets","id":"docstrings/FastAI.Datasets.html"},{"body":"Learner Finally we bring the model and data loaders together with an optimizer and loss function in a  Learner .  The  Learner  stores all state for training the model .  It also features a powerful, extensible  callback system  enabling checkpointing, hyperparameter scheduling, TensorBoard logging, and many other features .  Here we use the  ToGPU()  callback so that model and batch data will be transferred to an available GPU and  Metrics(accuracy)  to track the classification accuracy during training . With that setup, training  learner  is dead simple:","id":"docs/introduction.html#learner"},{"body":"private   invert!   —   function Applies the inverse of the operation  step  to  buf  inplace .   buf  is mutated,","id":"docstrings/FastAI.invert!.html"},{"body":"public   fitonecycle!   —   function Fit  learner  for  nepochs  using a one - cycle learning rate schedule .","id":"docstrings/FastAI.fitonecycle!.html"},{"body":"Image classification See  ImageClassification  for now .","id":"docs/methods/imageclassification.html#image-classification"},{"body":"Model input size:  (sz..., ch, batch)  where  ch  depends on color type  C . output size:  (nclasses, batch)","id":"docstrings/FastAI.ImageClassification.html#model"},{"body":"public   ImagePreprocessing   —   struct Converts an image to a color  C , then to a 3D - array of type  T  and finally normalizes the values using  means  and  stds . If no  means  or  stds  are given, uses ImageNet statistics .","id":"docstrings/FastAI.ImagePreprocessing.html"},{"body":"private   freeze   —   function Freeze all parameters in  model , except those in  model[indices] .","id":"docstrings/FastAI.freeze.html"},{"body":"private   run!   —   function Applies the operation  step  inplace to  buf .   buf  is mutated .","id":"docstrings/FastAI.run!.html"},{"body":"public   filterobs   —   function Return a subset of data container  data  including all indices  i  for which  f(getobs(data, i)) === true .","id":"docstrings/FastAI.Datasets.filterobs.html"},{"body":"Quickstart FastAI . jl makes it easy to train models for common tasks .  For example, we can train an image classification model in just 6 lines .","id":"docs/quickstart.html#quickstart"},{"body":"private   withfields   —   function Replace fields on  x  with given keyword arguments, run  f  and then restore the fields . Every keyword argument is a mapping  (field, value)  or  (field, (setfn!, value)) . setfn!(x, val)  will be used to set the field; if as in the first case none is given  setfield!  is used .","id":"docstrings/FastAI.withfields.html"},{"body":"FastAI . jl interfaces","id":"docs/interfaces.html#fastaijl-interfaces"},{"body":"Data containers This tutorial explains what data containers are, how they are used in FastAI . jl and how to create your own . TODO","id":"docs/data_containers.html#data-containers"},{"body":"Model Now we create a Flux . jl model .   methodmodel  is a part of the learning method interface that knows how to smartly construct an image classification model from different backbone architectures .  Here a classficiation head with the appropriate number of classes is stacked on a slightly modified version of the ResNet architecture .","id":"docs/introduction.html#model"},{"body":"Type abbreviations In many docstrings, generic types are abbreviated with the following symbols .  Many of these refer to a learning method; the context should make clear which method is meant . DC{T} : A  data container  of type T, meaning a type that implements the data container interface  getobs  and  nobs  where  getobs : (DC{T}, Int) -> Int , that is, each observation is of type  T . I : Type of the unprocessed input in the context of a method . T : Type of the target variable . X : Type of the processed input .  This is fed into a  model , though it may be batched beforehand .   Xs  represents a batch of processed inputs . Y : Type of the model output .   Ys  represents a batch of model outputs . model / M : A learnable mapping  M : (X,) -> Y  or  M : (Xs,) -> Ys .  It predicts an encoded target from an encoded input .  The learnable part of a learning method . Some examples of these in use: LearningTask  represents the task of learning to predict  T  from  I . LearningMethod  is a concrete approach to learning to predict  T  from  I  by using the encoded representations  X  and  Y . encodeinput : (method, context, I) -> X  encodes an input so that a prediction can be made by a model . A task dataset is a  DC{(I, T)} , i . e .  a data container where each observation is a 2 - tuple of an input and a target .","id":"docs/glossary.html#type-abbreviations"},{"body":"Interface DC  is a data container with observations of type D (i . e .   typeof(getobs(::DC<D>, i)::D) ) Transformations: mapobs(f::(D -> E), ::DC<D>)::DC<E> Map a function (or a tuple of functions) over a data container . Tuple(DC<D1>, ..., DC<DN>)::DC<(D1,...,DN)> Combine multiple data containers into a single data container that returns tuples of the each ’ s observations . filterobs(f, DC<D>)::DC<D> Keep only observations for which  f(obs) === true . groupobs(f, DC<D>)::(DC1<D>, ..., DCN<D>)  with  N  the unique return values of  f(::D) joinobs(f, DC<D1>, ..., DC<DN>)::DC<D> Combines N datasets into a single one,  “ concatenating ”  them . Primitive datasets: FileDataset(dir; filterfn) Each file in  dir  is one observation .  Currently implemented in DLDatasets . jl with FileTrees . jl and observation type  FileTrees.File . TableDataset(table) Every row in the table is an observation .  Could use Tables . jl interface to be compatible with tons of packages .","id":"docstrings/FastAI.Datasets.html#interface"},{"body":"public   finetune!   —   function Behaves as  fastai.Learner.fine_tune","id":"docstrings/FastAI.finetune!.html"},{"body":"Setup FastAI . jl is not registered yet since it depends on some unregistered packages (Flux . jl v0 . 12 . 0), but you can try it out using the included  Manifest.toml .  You will need Julia 1 . 6 for this ( ! ) as the Manifest is not backwards compatible .  You should be able to install FastAI . jl using the REPL as follows:","id":"docs/setup.html#setup"},{"body":"Data container A data structure that is used to load a number of data observations separately and lazily .  It defines how many observations it holds with  nobs  and how to load a single observation with  getobs .","id":"docs/glossary.html#data-container"},{"body":"Learning methods This tutorial explains what learning tasks and methods are, how they are used in FastAI . jl and how to create your own . TODO .  For now, refer to the  DLPipelines . jl docs .","id":"docs/learning_methods.html#learning-methods"},{"body":"Mid - level Learner methodmodel adaptmodel methodlossfn Callback","id":"docs/interfaces.html#mid-level"},{"body":"Training","id":"docs/interfaces.html#training"},{"body":"public   mapobs   —   function Lazily map  f  over the observations in a data container  data . Lazily map each function in tuple  fs  over the observations in data container  data . Returns a tuple of transformed data containers . Map a  NamedTuple  of functions over  data , turning it into a data container of  NamedTuple s .  Field syntax can be used to select a column of the resulting data container .","id":"docstrings/FastAI.Datasets.mapobs.html"},{"body":"private   run   —   function Applies the operation  step  to  data","id":"docstrings/FastAI.run.html"},{"body":"Introduction This tutorial explains the qickstart examples and some core abstractions FastAI . jl is built on . On the  quickstart page , we showed how to train models on common tasks in a few lines of code: Let ’ s unpack each line .","id":"docs/introduction.html#introduction"},{"body":"FastAI Stable Dev Build Status FastAI . jl is inspired by  fastai , and is a repository of best practices for deep learning in Julia .  Its goal is to easily enable creating state - of - the - art models .  FastAI enables the design, training, and delivery of deep learning models that compete with the best in class, using few lines of code . As an example, training an image classification model from scratch is as simple as Please read  the documentation  for more information and see the  setup instructions","id":"README.html#fastai"},{"body":"Task data container / dataset DC{(I, T)} .  A data container containing pairs of inputs and targets .  Used in  methoddataset ,  methoddataloaders  and  evaluate","id":"docs/glossary.html#task-data-container--dataset"},{"body":"private   withcallbacks   —   function Run  f  with  callbacks  on  learner .  Existing callbacks on  learner  of the same type as in  callbacks  are swapped during the execution of  f .","id":"docstrings/FastAI.withcallbacks.html"},{"body":"Glossary Terms commonly used in  FastAI . jl .","id":"docs/glossary.html#glossary"},{"body":"Mid - level Load and transform data containers . datasetpath FileDataset TableDataset mapobs groupobs joinobs groupobs","id":"docs/interfaces.html#mid-level-1"},{"body":"Data containers This line downloads and loads the  ImageNette  image classification dataset, a small subset of ImageNet with 10 different classes .   dataset  is a  data container  that can be used to load individual observations, here of images and the corresponding labels .  We can use  getobs(dataset, i)  to load the  i - th observation and  nobs  to find out how many observations there are . To train on a different dataset, you could replace  dataset  with other data containers made up of pairs of images and classes .","id":"docs/introduction.html#data-containers"},{"body":"Low - level LearningMethod LearningTask encode encodeinput decodey","id":"docs/interfaces.html#low-level"},{"body":"private   getclasses   —   function Get the list of classes for classification dataset  name .","id":"docstrings/FastAI.Datasets.getclasses.html"},{"body":"Examples Loading and splitting an image classification dataset stored in the same file structure as ImageNette, i . e . : train class1 obs1 … obs2 class1 obs1 … obs2 valid … Turning a container of (input, target) into a container of (x, y) and then an iterator of batches (xs, ys) .  This is pretty much all  methoddataset  and  methoddataloaders  do . Loading an image dataset without labels for inference .","id":"docstrings/FastAI.Datasets.html#examples"},{"body":"Learning method An instance of  DLPipelines.LearningMethod .  A concrete approach to solving a learning task .  Encapsulates the logic and configuration for processing data to train a model and make predictions . See the DLPipelines . jl documentation for more information .","id":"docs/glossary.html#learning-method"},{"body":"public   loadfile   —   function Load a file from disk into the appropriate format .","id":"docstrings/FastAI.Datasets.loadfile.html"},{"body":"Method Here we define  ImageClassification , which defines how data is processed before being fed to the model and how model outputs are turned into predictions .   classes  is a vector of strings naming each class, and  (224, 224)  the size of the images that are input to the model . ImageClassification  is a  LearningMethod , an abstraction that encapsulates the logic and configuration for training models on a specific learning task .  See  learning methods  to find out more about how they can be used and how to create custom learning methods .","id":"docs/introduction.html#method"},{"body":"Types input::AbstractMatrix{2, <:Colorant} : an image target  the class label that the image belongs to x::AbstractArray{Float32, 3} : a normalized 3D - array with dimensions  height, width, channels y::AbstractVector{Float32} : one - hot encoding of category","id":"docstrings/FastAI.ImageClassification.html#types"},{"body":"High - level Quickly download and load task data containers from the fastai dataset library . loaddataset DATASETS","id":"docs/interfaces.html#high-level-1"},{"body":"private   datasetpath   —   function Return the folder that dataset  name  is stored . If it hasn ’ t been downloaded yet, you will be asked if you want to download it .  See  DATASETS  for a list of available datasets .","id":"docstrings/FastAI.Datasets.datasetpath.html"},{"body":"Image classification","id":"docs/quickstart.html#image-classification"}]