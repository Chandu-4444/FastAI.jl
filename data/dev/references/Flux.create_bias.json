{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/src/utils.jl","docid":"sourcefiles/Flux/src/utils.jl"},{"tag":"sourcefile","title":"Flux/src/zeros.jl","docid":"sourcefiles/Flux/src/zeros.jl"},{"tag":"sourcefile","title":"Flux/src/layers/basic.jl","docid":"sourcefiles/Flux/src/layers/basic.jl"},{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"}],"methods":[{"line":384,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/utils.jl","method_id":"Flux.create_bias_1","symbol_id":"Flux.create_bias","signature":"create_bias(weights::AbstractArray, bias::Bool, dims::Integer...)"},{"line":387,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/utils.jl","method_id":"Flux.create_bias_2","symbol_id":"Flux.create_bias","signature":"create_bias(weights::AbstractArray, bias::AbstractArray, dims::Integer...)"},{"line":52,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/zeros.jl","method_id":"Flux.create_bias_3","symbol_id":"Flux.create_bias","signature":"create_bias(weights::AbstractArray, bias::Flux.Zeros, dims::Integer...)"}],"name":"create_bias","title":"create_bias","symbol_id":"Flux.create_bias","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["create_bias(weights, bias, length)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Return a bias parameter for a layer, based on the value given",{"attributes":{},"tag":"br","children":[],"type":"node"},"to the constructorâ€™s keyword ",{"attributes":{},"tag":"code","children":["bias=bias"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["bias == true"],"type":"node"}," creates a zero vector, of the same type as weights."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["bias == false"],"type":"node"}," returns ",{"attributes":{},"tag":"code","children":["Zeros()"],"type":"node"},", a special struct which exists only to encode the absence of bias."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["bias::AbstractArray"],"type":"node"}," uses the array provided, provided it has the correct size and eltype. If the type is wrong, it will be converted."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}