{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/Flux.jl","docid":"sourcefiles/Flux/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/src/layers/show.jl","docid":"sourcefiles/Flux/src/layers/show.jl"},{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"},{"tag":"sourcefile","title":"Flux/src/deprecations.jl","docid":"sourcefiles/Flux/src/deprecations.jl"}],"methods":[{"line":70,"file":"/opt/hostedtoolcache/julia/1.7.2/x64/share/julia/base/deprecated.jl","method_id":"Flux.DepthwiseConv_1","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(; weight, bias, activation, kws...)"},{"line":350,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_2","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(k::Tuple{Vararg{Integer, N}}, ch::Pair{<:Integer, <:Integer})"},{"line":350,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_3","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(k::Tuple{Vararg{Integer, N}}, ch::Pair{<:Integer, <:Integer}, σ; init, stride, pad, dilation, weight, bias)"},{"line":341,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_4","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(w::AbstractArray{T, N})"},{"line":341,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_5","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(w::AbstractArray{T, N}, bias)"},{"line":341,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_6","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(w::AbstractArray{T, N}, bias, σ; stride, pad, dilation)"},{"line":327,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_7","symbol_id":"Flux.DepthwiseConv","signature":"DepthwiseConv(σ::F, weight::A, bias::V, stride::Tuple{Vararg{Int64, N}}, pad::Tuple{Vararg{Int64, M}}, dilation::Tuple{Vararg{Int64, N}})"}],"name":"DepthwiseConv","title":"DepthwiseConv","symbol_id":"Flux.DepthwiseConv","public":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["DepthwiseConv(weight::AbstractArray, bias, [activation; stride, pad, dilation])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Constructs a layer with the given weight and bias arrays.",{"attributes":{},"tag":"br","children":[],"type":"node"},"Accepts the same keywords as the ",{"attributes":{},"tag":"code","children":["DepthwiseConv((4,4), 3 => 6, relu)"],"type":"node"}," method."],"type":"node"},{"attributes":{},"tag":"hr","children":[],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["DepthwiseConv(filter, in => out, σ=identity; stride=1, pad=0, dilation=1, [bias, init])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Depthwise convolutional layer. ",{"attributes":{},"tag":"code","children":["filter"],"type":"node"}," is a tuple of integers",{"attributes":{},"tag":"br","children":[],"type":"node"},"specifying the size of the convolutional kernel, while",{"attributes":{},"tag":"br","children":[],"type":"node"},{"attributes":{},"tag":"code","children":["in"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["out"],"type":"node"}," specify the number of input and output channels."],"type":"node"},{"attributes":{},"tag":"p","children":["Note that ",{"attributes":{},"tag":"code","children":["out"],"type":"node"}," must be an integer multiple of ",{"attributes":{},"tag":"code","children":["in"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Parameters are controlled by additional keywords, with defaults",{"attributes":{},"tag":"br","children":[],"type":"node"},{"attributes":{},"tag":"code","children":["init=glorot_uniform"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["bias=true"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"}," for more detailed description of keywords."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> xs = rand(Float32, 100, 100, 3, 50);  # a batch of 50 RGB images\n\njulia> lay = DepthwiseConv((5,5), 3 => 6, relu; bias=false)\nDepthwiseConv((5, 5), 3 => 6, relu, bias=false)  # 150 parameters\n\njulia> lay(xs) |> size\n(96, 96, 6, 50)\n\njulia> DepthwiseConv((5,5), 3 => 9, stride=2, pad=2)(xs) |> size\n(50, 50, 9, 50)\n"],"type":"node"}],"type":"node"}],"type":"node"}