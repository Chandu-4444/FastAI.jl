{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/layers/basic.jl","docid":"sourcefiles/Flux/src/layers/basic.jl"}],"methods":[{"line":376,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/basic.jl","method_id":"Flux.Bilinear_1","symbol_id":"Flux.Bilinear","signature":"Flux.Bilinear(in1::Integer, in2::Integer, out::Integer)"},{"line":376,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/basic.jl","method_id":"Flux.Bilinear_2","symbol_id":"Flux.Bilinear","signature":"Flux.Bilinear(in1::Integer, in2::Integer, out::Integer, σ; init, bias)"},{"line":367,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/basic.jl","method_id":"Flux.Bilinear_3","symbol_id":"Flux.Bilinear","signature":"Flux.Bilinear(W::A)"},{"line":367,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/basic.jl","method_id":"Flux.Bilinear_4","symbol_id":"Flux.Bilinear","signature":"Flux.Bilinear(W::A, bias)"},{"line":367,"file":"/home/runner/.julia/packages/Flux/7nTyc/src/layers/basic.jl","method_id":"Flux.Bilinear_5","symbol_id":"Flux.Bilinear","signature":"Flux.Bilinear(W::A, bias, σ::F)"}],"name":"Bilinear","title":"Bilinear","symbol_id":"Flux.Bilinear","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Bilinear(in1, in2, out, σ=identity; bias=true, init=glorot_uniform)\nBilinear(W::AbstractArray, [bias, σ])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Creates a Bilinear layer, which operates on two inputs at the same time.",{"attributes":{},"tag":"br","children":[],"type":"node"},"Its output, given vectors ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," & ",{"attributes":{},"tag":"code","children":["y"],"type":"node"},", is another vector ",{"attributes":{},"tag":"code","children":["z"],"type":"node"}," with,",{"attributes":{},"tag":"br","children":[],"type":"node"},"for all ",{"attributes":{},"tag":"code","children":["i ∈ 1:out"],"type":"node"},":"],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["z[i] = σ(x' * W[i,:,:] * y + bias[i])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["y"],"type":"node"}," are matrices, then each column of the output ",{"attributes":{},"tag":"code","children":["z = B(x, y)"],"type":"node"}," is of this form,",{"attributes":{},"tag":"br","children":[],"type":"node"},"with ",{"attributes":{},"tag":"code","children":["B"],"type":"node"}," a Bilinear layer."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["y"],"type":"node"}," is not given, it is taken to be equal to ",{"attributes":{},"tag":"code","children":["x"],"type":"node"},", i.e. ",{"attributes":{},"tag":"code","children":["B(x) == B(x, x)"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["The two inputs may also be provided as a tuple, ",{"attributes":{},"tag":"code","children":["B((x, y)) == B(x, y)"],"type":"node"},",",{"attributes":{},"tag":"br","children":[],"type":"node"},"which is accepted as the input to a ",{"attributes":{},"tag":"code","children":["Chain"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["The initialisation works as for ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Dense"],"type":"node"}],"type":"node"}," layer, with ",{"attributes":{},"tag":"code","children":["W = init(out, in1, in2)"],"type":"node"},".",{"attributes":{},"tag":"br","children":[],"type":"node"},"By default the bias vector is ",{"attributes":{},"tag":"code","children":["zeros(Float32, out)"],"type":"node"},", option ",{"attributes":{},"tag":"code","children":["bias=false"],"type":"node"}," will switch off",{"attributes":{},"tag":"br","children":[],"type":"node"},"trainable bias. Either of these may be provided explicitly."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> x, y = randn(Float32, 5, 32), randn(Float32, 5, 32);\n\njulia> B = Flux.Bilinear(5, 5, 7);\n\njulia> B(x) |> size  # interactions based on one input\n(7, 32)\n\njulia> B(x,y) == B((x,y))  # two inputs, may be given as a tuple\ntrue\n\njulia> sc = SkipConnection(\n                Chain(Dense(5, 20, tanh), Dense(20, 9, tanh)),\n                Flux.Bilinear(9, 5, 3, bias=false),\n            );  # used as the recombinator, with skip as the second input\n\njulia> sc(x) |> size\n(3, 32)\n\njulia> Flux.Bilinear(rand(4,8,16), false, tanh)  # first dim of weight is the output\nBilinear(8, 16, 4, tanh, bias=false)\n"],"type":"node"}],"type":"node"}],"type":"node"}